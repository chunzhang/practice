/*
You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 

Constraints:

n == graph.length
n == graph[i].length
2 <= n <= 300
graph[i][j] is 0 or 1.
graph[i][j] == graph[j][i]
graph[i][i] == 1
1 <= initial.length <= n
0 <= initial[i] <= n - 1
All the integers in initial are unique.
*/


// union find
// time complexity: O(N^2) --> need to traverse the adjacency matrix
class UnionFind {
public:
    UnionFind(int sz) : _parent(sz,0), _rank(sz,1) {
        for(int i=0; i<sz; ++i)
            _parent[i] = i;
    }
    
    int getParent(int n) {
        if(_parent[n] != n)
            _parent[n] = getParent(_parent[n]);  // path compression
        return _parent[n];
    }
    
    void merge(int n1, int n2) {
        int p1 = getParent(n1);
        int p2 = getParent(n2);
        if(p1 == p2)
            return;
        
        if(_rank[p1] < _rank[p2])  // merge by rank
            _parent[p1] = p2;
        else if(_rank[p1] > _rank[p2])
            _parent[p2] = p1;
        else {
            _parent[p2] = p1;
            _rank[p1]++;
        }
    }
    
private:
    vector<int> _parent;
    vector<int> _rank;
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        const int N = graph.size();
        
        // union find to search connected components
        UnionFind uf(N);
        for(int i=0; i<N; ++i) {
            for(int j=i+1; j<N; ++j) {
                if(graph[i][j])
                    uf.merge(i, j);
            }
        }
        
        // compute size of each connected components
        sort(initial.begin(), initial.end());  // this is becuase input may not be sorted, but we want to return the smallest node index
        vector<int> ccAllNodes(N, 0);  // size of each connected components
        for(int i=0; i<N; ++i)
            ccAllNodes[uf.getParent(i)]++;
        vector<int> ccInitNodes(N, 0);  // number of initial nodes of each connected components
        for(int n : initial)
            ccInitNodes[uf.getParent(n)]++;
        
        // build answer
        int maxSaved = -1;  // max number of nodes saved from virus, if one of the node is removed from initial list
        int ans = -1;
        for(int n : initial) {
            int p = uf.getParent(n);
            int canSave = ccInitNodes[p]==1?ccAllNodes[p]:0;
            if(canSave > maxSaved) {
                maxSaved = canSave;
                ans = n;
            }
        }
        
        return ans;
    }
        
};


// ref impl: use DFS to find connected components (in Java)
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // 1. Color each component.
        // colors[node] = the color of this node.

        int N = graph.length;
        int[] colors = new int[N];
        Arrays.fill(colors, -1);
        int C = 0;

        for (int node = 0; node < N; ++node)
            if (colors[node] == -1)
                dfs(graph, colors, node, C++);

        // 2. Size of each color.
        int[] size = new int[C];
        for (int color: colors)
            size[color]++;

        // 3. Find unique colors.
        int[] colorCount = new int[C];
        for (int node: initial)
            colorCount[colors[node]]++;

        // 4. Answer
        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int c = colors[node];
            if (colorCount[c] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (size[c] > size[colors[ans]])
                    ans = node;
                else if (size[c] == size[colors[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE)
            for (int node: initial)
                ans = Math.min(ans, node);

        return ans;
    }

    public void dfs(int[][] graph, int[] colors, int node, int color) {
        colors[node] = color;
        for (int nei = 0; nei < graph.length; ++nei)
            if (graph[node][nei] == 1 && colors[nei] == -1)
                dfs(graph, colors, nei, color);
    }
};


// Brute force -- try removeal each node from initial, and then BFS to compute affected nodes
// time complexity: O(N3)
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int min_affected = INT_MAX;
        int min_node = -1;
        sort(begin(initial), end(initial));
        for (int t : initial) {
            vector<int> bad(graph.size(), 0);
            queue<int> q;
            for (int n : initial)
                if (n != t) {
                    bad[n] = 1;
                    q.push(n);
                }
            int affected = initial.size() - 1;
            while (!q.empty()) {
                int size = q.size();
                while (size--) {
                    int n = q.front(); q.pop();
                    for (int i = 0; i < graph[n].size(); ++i) {            
                        if (graph[n][i] == 0 || bad[i]) continue;
                        ++affected;            
                        bad[i] = 1;
                        q.push(i);
                    }
                }
            }      
            if (affected < min_affected) {
                min_affected = affected;
                min_node = t;
            }
        }    
        return min_node;    
    }
};
